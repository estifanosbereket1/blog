// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id            String    @id @map("_id") @default(cuid()) // Use auto() for MongoDB
  name          String?
  email         String    @unique
  emailVerified DateTime?
  hashedPassword String?
  image      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  comments      Comment[]
  accounts      Account[]
    sessions      Session[]
}

model Category {
  id    String @id @map("_id") @default(cuid())
  slug  String @unique
  title String
  posts Post[]
}

model Post {
  id          String    @id @map("_id") @default(cuid())
  title       String
  description String
  imageSrc    String
  slug        String    @unique
  createdAt   DateTime @default(now())
  views       Int       @default(0)
  userEmail   String
  user        User      @relation(fields: [userEmail], references: [email])
  catSlug     String
  cat         Category  @relation(fields: [catSlug], references: [slug])
  comments    Comment[] 
}

model Comment {
  id        String    @id @map("_id") @default(cuid())
  createdAt DateTime  @default(now())
  content   String
  postSlug  String
  post      Post      @relation(fields: [postSlug], references: [slug], onDelete:Cascade)
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
}

  // id                 String  @id  @map("_id") @default(cuid())
// model Account {
//   id                 String  @id  @map("_id") @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@unique([provider, providerAccountId])
// }

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  access_token       String?  @db.String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}